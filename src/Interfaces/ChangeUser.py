#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24
#  in conjunction with Tcl version 8.6
#    Jul 16, 2019 10:31:05 AM SAST  platform: Linux

import sys
import re
import databaseCon

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

try:
    from tkinter import messagebox
except:
    # Python 2
    import tkMessageBox as messagebox

import ChangeUser_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = UserChange (root)
    ChangeUser_support.init(root, top)
    root.mainloop()

w = None
def create_UserChange(root, email_in, db_in, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global email, db
    email = email_in
    db = db_in
    rt = root
    w = tk.Toplevel (root)
    top = UserChange (w)
    ChangeUser_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_UserChange():
    global w
    w.destroy()
    w = None

class UserChange:
    def back(self):
        msg = messagebox.askyesno("Change user", "Are you sure you want to leave?");
        if (msg):
            ChangeUser_support.createUser()

    def change(self):
        type=self.Ltb_want_change.get(self.Ltb_want_change.curselection())
        if(type=="Name"):
            self.changeName()
        else:
            if (type == "Surname"):
                self.changeLastName()
            else:
                if (type == "Email"):
                    self.changeEmail()
                else:
                    if (type == "Password"):
                        self.changePassword()
                    else:
                        if(type == "Roll"):
                            self.changeRoll()
                        else:
                            messagebox.showwarning("Change user", "Please select what to change.")

    def changeName(self):
        name =self.Ent_new_item.get()
        reenter_name = self.Ent_reenter_change.get()
        if(not(name==reenter_name)):
            messagebox.showwarning("Change user", "New item and re-enter item must match.")
        else:
            if(name=='' or reenter_name==''):
                messagebox.showwarning("Change user", "Please enter the item in both fields.")
            else:
                msg = messagebox.askyesno("Change user", "Are you sure you want to change this?")
                if (msg):
                    databaseCon.changeName(db,email,name)
                    messagebox.showinfo("Change user", "Successfully changed.")
        self.clear()

    def changeLastName(self):
        name =self.Ent_new_item.get()
        reenter_name = self.Ent_reenter_change.get()
        if(not(name==reenter_name)):
            messagebox.showwarning("Change user", "New item and re-enter item must match.")
        else:
            if(name=='' or reenter_name==''):
                messagebox.showwarning("Change user", "Please enter the item in both fields.")
            else:
                msg = messagebox.askyesno("Change user", "Are you sure you want to change this?")
                if (msg):
                   databaseCon.changeLastname(db,email,name)
                   messagebox.showinfo("Change user", "Succefully changed.")
        self.clear()

    def changeRoll(self):
        roll =self.Ent_new_item.get()
        reenter_roll = self.Ent_reenter_change.get()
        if(not(roll==reenter_roll)):
            messagebox.showwarning("Change user", "New item and re-enter item must match.")
        else:
            if(roll=='' or reenter_roll==''):
                messagebox.showwarning("Change user", "Please enter the item in both fields.")
            else:
                if(not(roll=="admin" or roll=="user")):
                    messagebox.showwarning("Change user", "Roll must be either admin or user.")
                else:
                    msg = messagebox.askyesno("Change user", "Are you sure you want to change this?")
                    if (msg):
                        databaseCon.changeRoll(db,email,roll)
                        messagebox.showinfo("Change user", "Successfully change.")
        self.clear()

    def changeEmail(self):
        newEmail =self.Ent_new_item.get()
        reenter_email = self.Ent_reenter_change.get()
        if (not (newEmail == reenter_email)):
            messagebox.showwarning("Change user", "New item and re-enter item must match.")
        else:
            if (newEmail == '' or reenter_email == ''):
                messagebox.showwarning("Change user", "Please enter the item in both fields.")
            else:
                if(self.checkEmail(newEmail)):
                    msg = messagebox.askyesno("Change user", "Are you sure you want to change this?");
                    if (msg):
                        databaseCon.changeEmail(db,email,newEmail)
                        messagebox.showinfo("Change user", "Successfully change.")
        self.clear()

    def changePassword(self):
        password = self.Ent_new_item.get()
        reenter_password = self.Ent_reenter_change.get()
        if (not (password == reenter_password)):
            messagebox.showwarning("Change user", "New item and re-enter item must match.")
        else:
            if (password == '' or reenter_password == ''):
                messagebox.showwarning("Change user", "Please enter the item in both fields.")
            else:
                if (self.checkPassword(password)):
                    msg = messagebox.askyesno("Change user", "Are you sure you want to change this?");
                    if (msg):
                        databaseCon.changePassword(db,email,password)
                        messagebox.showinfo("Change user", "Successfully change.")
        self.clear()

    # check if the email is correct
    def checkEmail(self, email):
        mail = email
        check = re.search("([a-z]|[A-Z]|[0-9])+\@([a-z]|[A-Z]|[0-9])+((\.(([A-Z]|[a-z]|[0-9])+))+)$",mail)
        if (check):
            return True
        else:
            messagebox.showwarning("Change user", "Invalid email.")
            self.clear()
            return False

    # check if the password is correct
    def checkPassword(self, psw):
        password = psw
        number = re.findall("[0-9]", password)
        if (not (number)):
            messagebox.showwarning("Change user", "Your password needs a number.")
            self.Ent_new_item.delete(0, 'end')
            self.Ent_reenter_change.delete(0, 'end')
            return False
        caps = re.findall("[A-Z]", password)
        if (not (caps)):
            messagebox.showwarning("Change user", "Your password needs a uppercase character.")
            self.clear()
            return False
        lower = re.findall("[a-z]", password)
        if (not (lower)):
            messagebox.showwarning("Password", "Your password needs a lowercase character.")
            self.clear()
            return False
        symbols = re.findall("[!,@,#,$,%,^,&,*,.,?]", password)
        if (not (symbols)):
            messagebox.showwarning("Password", "Your password needs a symbol.")
            self.clear()
            return False
        return True

    def clear(self):
        self.Ent_new_item.delete(0, 'end')
        self.Ent_reenter_change.delete(0, 'end')

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {DejaVu Sans} -size 15 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 20 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("484x318+756+142")
        top.title("Change user")

        self.Lbl_Change_user = tk.Label(top)
        self.Lbl_Change_user.place(relx=0.31, rely=0.075, height=36, width=192)
        self.Lbl_Change_user.configure(font=font9)
        self.Lbl_Change_user.configure(text='''Change user''')

        self.Lbl_want_change = tk.Label(top)
        self.Lbl_want_change.place(relx=0.103, rely=0.312, height=26, width=151)
        self.Lbl_want_change.configure(font=font11)
        self.Lbl_want_change.configure(text='''Want to change:''')

        self.Ltb_want_change = tk.Listbox(top)
        self.Ltb_want_change.place(relx=0.558, rely=0.252, relheight=0.28, relwidth=0.339)
        self.Ltb_want_change.configure(background="white")
        self.Ltb_want_change.configure(font="TkFixedFont")
        self.Ltb_want_change.configure(width=164)
        self.Ltb_want_change.insert(1, "Name")
        self.Ltb_want_change.insert(2, "Surname")
        self.Ltb_want_change.insert(3, "Email")
        self.Ltb_want_change.insert(4, "Password")
        self.Ltb_want_change.insert(5, "Roll")

        self.Lbl_new_item = tk.Label(top)
        self.Lbl_new_item.place(relx=0.103, rely=0.551, height=28, width=134)
        self.Lbl_new_item.configure(font=font11)
        self.Lbl_new_item.configure(text='''New change:''')

        self.Ent_new_item = tk.Entry(top)
        self.Ent_new_item.place(relx=0.558, rely=0.551,height=28, relwidth=0.343)
        self.Ent_new_item.configure(background="white")
        self.Ent_new_item.configure(font="TkFixedFont")

        self.Lbl_reenter_change = tk.Label(top)
        self.Lbl_reenter_change.place(relx=0.103, rely=0.652, height=28
                , width=177)
        self.Lbl_reenter_change.configure(font=font11)
        self.Lbl_reenter_change.configure(text='''Re-enter change:''')

        self.Ent_reenter_change = tk.Entry(top)
        self.Ent_reenter_change.place(relx=0.558, rely=0.652,height=23, relwidth=0.343)
        self.Ent_reenter_change.configure(background="white")
        self.Ent_reenter_change.configure(font="TkFixedFont")

        self.Btn_change = tk.Button(top)
        self.Btn_change.place(relx=0.124, rely=0.789, height=38, width=105)
        self.Btn_change.configure(font=font11)
        self.Btn_change.configure(text='''Change''')
        self.Btn_change.configure(command=lambda: self.change())

        self.Btn_back = tk.Button(top)
        self.Btn_back.place(relx=0.64, rely=0.789, height=38, width=77)
        self.Btn_back.configure(font=font11)
        self.Btn_back.configure(text='''Back''')
        self.Btn_back.configure(command=lambda: self.back())

if __name__ == '__main__':
    vp_start_gui()





