  \section{Quality Requirements}
            \subsection{Performance}
            The software system must be able to handle the same number of packages that application, which it is protecting usually handles. In other words, the system should have the same performance capabilities as the services it is protecting so that it will not cause a bottleneck.This can be measured by looking at the drop rate and number of packages.  
            \subsection{Security}
            The security of the system has to be high, since one of the main purposes of the software is to protect the services against DOS attacks. The software runs on the kernel which will expose the client to other threats if the security isn't high enough.
            \subsection{Availability}
            The system should have the same availability as the applications that it protects. Seeing as the system will also be a program, it will in all probability encounter challenges seeing it is fallible, thus we came to an agreement with the client, that a 99.5\% availability will be acceptable.  
            \subsection{Maintainability}
            Maintainability is important in two ways, namely the upkeep of the code and the add and remove of services which have to be protected. \\
            - Upkeep of code: The software must be able to be changed so that the software as a whole works on the latest version of Linux. \\
            - Addition and removal of services: The user should be able to add and remove services as they see fit through the use of a user interface. 
            \subsection{Scalability}
            The system should be able to scale to the size of the server, which it is protecting without requiring additional changes to be made to the basic structure of the system. It should also be able to accommodate  a different  number of load pools.
            \subsection{Cost}
            Cost isn't very important, since all the technologies that are being used to design the system is free and open sourced. It will not cost anything to create the software, except for the time needed to learn how to use the technologies. Installing the software will only cost time, since all that needs to be done is to compile the code and link it with the kernel.    
            \subsection{Usability}
            The system will be easy to use by the client, because of the intuitive user interface.The only skills the client will need will be knowledge on how to install the software on a server.
            \subsection{Flexibility}
            Th system will need to be highly flexible so that it can accommodate different servers with different amounts and types of services which it protects. This will be obtained through the second interface which allows users to allocate and remove services which have to be protected.
            \subsection{Monitorability}
            The system will be monitored through a GUI which displays packet rates (total and per pool), drop rates, heat-map, packet size, internal overhead and white and black listed IPs. This GUI should be accessible anywhere, i.e. a website online. 